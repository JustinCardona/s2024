using JLD2, LinearAlgebra, CUDA, GilaElectromagnetics, BaryRational, Serialization
include("load_gila.jl")

(G::GlaOpr)(x::AbstractArray) = G * x
(G::AbstractMatrix)(x::AbstractArray) = G * x
adjoint(G::GlaOpr) = x -> conj(G * conj(x))
adjoint(G::Function) = x -> conj(G(conj(x)))

similar_fill(v::AbstractArray, fill_val::T) where T = fill!(similar(v), fill_val)
similar_fill(v::AbstractArray, dims::NTuple{N, Int}, fill_val::T) where {N, T} = fill!(similar(v, dims), fill_val)
Base.:\(::Nothing, x::AbstractArray) = (x, 0)


mutable struct ConstraintFunction
	size::Int
	ùïÜ::Function
	ùîº::Function
	ùïå::Function
	ùïå·¥¥::Function
	‚Ñ§·µÄ·µÄ::Function
	‚Ñ§·µÄÀ¢::Function
	S::AbstractVector{ComplexF64}
    ‚Ñù¬π::Diagonal{ComplexF32, CuArray{ComplexF32, 1, CUDA.DeviceMemory}}
    ‚Ñù¬≤::Diagonal{ComplexF32, CuArray{ComplexF32, 1, CUDA.DeviceMemory}}

	function ConstraintFunction(n::Int)
		G·µí = load_greens_operator((n, n, n), (1//32, 1//32, 1//32), set_type=ComplexF32, use_gpu=true)
		ùïç = CUDA.Diagonal(CUDA.rand(ComplexF32, size(G·µí, 2))) - ComplexF32(0.5 * (1 + 1im)) * CUDA.Diagonal(CUDA.ones(ComplexF32, size(G·µí, 2)))
		‚Ñù¬π = CUDA.Diagonal(ComplexF32.(CUDA.rand(Float32, size(G·µí, 2)))) - ComplexF32(0.5) * CUDA.Diagonal(CUDA.ones(ComplexF32, size(G·µí, 2)))
		‚Ñù¬≤ = CUDA.Diagonal(ComplexF32.(CUDA.rand(Float32, size(G·µí, 2)))) - ComplexF32(0.5) * CUDA.Diagonal(CUDA.ones(ComplexF32, size(G·µí, 2)))
		S = CUDA.rand(ComplexF32, size(G·µí, 2))

		# G·µí·¥¥ = G·µí'

		# ùïç‚Åª¬π = inv(ùïç)
		# ùïç‚Åª·¥¥ = inv(ùïç)'
		ùïå = x -> inv(ùïç)'(x) - G·µí'(x)
		ùïå·¥¥ = x -> conj(ùïå(conj(x)))

		ùïÜ = x -> ComplexF32(0.5) * (inv(ùïç)'(x) - inv(ùïç)(x))
		ùîº = x::AbstractVector{ComplexF32} -> ComplexF32(0.5) * (ùïå(x) - ùïå·¥¥(x))


		‚Ñ§·µÄ·µÄ = x::AbstractVector{ComplexF32} -> ùïÜ(x) + ComplexF32(0.5) * (ùïå(‚Ñù¬π(x)) + conj(‚Ñù¬π)ùïå·¥¥(x)) + ComplexF32(0.5) * (ùïå(‚Ñù¬≤(x)) - conj(‚Ñù¬≤)ùïå·¥¥(x))
		‚Ñ§·µÄÀ¢ = x -> ComplexF32(0.5) * ComplexF32.(‚Ñù¬π(x) + im*‚Ñù¬≤(x))
		new(size(G·µí, 2), ùïÜ, ùîº,  ùïå, ùïå·¥¥, ‚Ñ§·µÄ·µÄ, ‚Ñ§·µÄÀ¢, S, ‚Ñù¬π, ‚Ñù¬≤)
	end
end


function eval(C::ConstraintFunction, Œ∂::Float32)
	‚Ñ§ = x -> C.‚Ñ§·µÄ·µÄ(x) + Œ∂ * C.ùîº(x)

	function bicgstab(op, b::AbstractVector; preconditioner=nothing, max_iter::Int=size(op, 2), atol::Real=zero(real(eltype(b))), rtol::Real=sqrt(eps(real(eltype(b)))))
        T = eltype(b)
		atol = max(atol, rtol * norm(b))

		mvp = 0 # mvp = matrix vector products

		x = similar_fill(b, zero(T))
		œÅ_prev = zero(T)
		œâ = zero(T)
		Œ± = zero(T)
		v = similar_fill(b, zero(T))
		residual = deepcopy(b)
		residual_shadow = deepcopy(residual)
		p = deepcopy(residual)
		s = similar(residual)

		for num_iter in 1:max_iter
			if norm(residual) < atol
				return x, mvp
			end

			œÅ = dot(residual_shadow, residual)
			if num_iter > 1
				Œ≤ = (œÅ / œÅ_prev) * (Œ± / œâ)
				p = residual + Œ≤*(p - œâ*v)
			end
			pÃÇ, precon_mvp = preconditioner \ p
			mvp += precon_mvp
			# v = op * pÃÇ
			v = op(pÃÇ)
			mvp += 1
			residual_v = dot(residual_shadow, v)
			Œ± = œÅ / residual_v
			residual -= Œ±*v
			s = deepcopy(residual)

			if norm(residual) < atol
				x += Œ±*pÃÇ
				return x, mvp
			end

			≈ù, precon_mvp = preconditioner \ s
			≈ù, precon_mvp = preconditioner \ residual
			mvp += precon_mvp
			# t = op * ≈ù
			t = op(≈ù)
			mvp += 1
			œâ = dot(t, s) / dot(t, t)
			œâ = dot(t, residual) / dot(t, t)
			x += Œ±*pÃÇ + œâ*≈ù
			residual -= œâ*t
			œÅ_prev = œÅ
			println(num_iter, " ", norm(residual))
		end
		# @show norm(residual), atol
		throw("BiCGStab did not converge after $max_iter iterations.")
	end
	T = bicgstab(‚Ñ§, C.‚Ñ§·µÄÀ¢(C.S), max_iter=C.size)[1]
    return real(imag(conj(C.S)'T) - conj(T)'C.ùîº(T))
end


function update(C::ConstraintFunction, dx::Float32)
    C.‚Ñù¬π += ComplexF32(dx) * CUDA.Diagonal(ComplexF32.(CUDA.rand(Float32, C.size))) - ComplexF32(0.5) * CUDA.Diagonal(CUDA.ones(ComplexF32, C.size))
    C.‚Ñù¬≤ += ComplexF32(dx) * CUDA.Diagonal(ComplexF32.(CUDA.rand(Float32, C.size))) - ComplexF32(0.5) * CUDA.Diagonal(CUDA.ones(ComplexF32, C.size))
    C.‚Ñ§·µÄ·µÄ = x::AbstractVector{ComplexF32} -> C.ùïÜ(x) + ComplexF32(0.5) * (C.ùïå(C.‚Ñù¬π(x)) + conj(C.‚Ñù¬π)C.ùïå·¥¥(x)) + ComplexF32(0.5) * (C.ùïå(C.‚Ñù¬≤(x)) - conj(C.‚Ñù¬≤)C.ùïå·¥¥(x))
	C.‚Ñ§·µÄÀ¢ = x -> ComplexF32(0.5) * ComplexF32.(C.‚Ñù¬π(x) + im*C.‚Ñù¬≤(x))
end


function approximate(s::ConstraintFunction, z::Float32, width::Int, domain::AbstractVector{Float32}, codomain::AbstractVector{Float32}, tol=Float32(1e-3))
    domain_z = range(z - tol * abs(z), z + tol * abs(z), width)
    domain_new = Float32.(vcat(domain, domain_z))
    codomain_new = Float32.(vcat(codomain, map(x -> eval(s, x), domain_z)))
    return aaa(domain_new, codomain_new, clean=1), domain_new, codomain_new
end


function find_zero(s::ConstraintFunction, z::Float32, width_init::Int, width::Int, domain::AbstractVector{Float32}, codomain::AbstractVector{Float32}, tol=Float32(1e-3), search_depth=0)
    a, domain, codomain = approximate(s, z, width_init, domain, codomain, tol)
    _, _, zeros = prz(a)
    z = Float32(maximum(map(x -> real(x), zeros)))
    if abs(eval(s, z)) < tol || search_depth == 20
        return z, a, domain, codomain
    end
    # println("\tsearch_depth: ", search_depth)
    return find_zero(s, Float32(z), width, width, domain, codomain, tol, search_depth+1)
end


function optimize(s::ConstraintFunction, z::Float32, width_init::Int, width::Int, depth::Int, tol=Float32(1e-4), dx=Float32(1e-2))
    z, a, domain, codomain = find_zero(s, z, width_init, width, Array{Float32}(undef, 0), Array{Float32}(undef, 0), tol)
    errs = Array{Float32}(undef, depth, 3)
    for i in range(1, depth)
        println("depth: ", i)
        z, a, domain, codomain = find_zero(s, z, width, width, domain, codomain, tol)
        errs[i, :] = [z, abs(eval(s, z)), length(domain)]
        # update(s, dx)
    end
    return errs
end

C = ConstraintFunction(2)
optimize(C, Float32(1.0), 2, 2, 2, Float32(1e4))