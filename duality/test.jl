using JLD2, LinearAlgebra, CUDA, GilaElectromagnetics
include("load_gila.jl")


# mutable struct ConstraintFunction
# 	function ConstraintFunction()
		
# 	end
# end


n = 512
G·µí = load_greens_operator((n, n, n), (1//32, 1//32, 1//32), set_type=ComplexF32, use_gpu=true)
# ùïç = CUDA.Diagonal(CUDA.rand(ComplexF32, size(G·µí, 2)))

ùïç = CUDA.Diagonal(CUDA.rand(ComplexF32, size(G·µí, 2))) - ComplexF32(0.5 * (1 + 1im)) * CUDA.Diagonal(CUDA.ones(ComplexF32, size(G·µí, 2)))

#TODO make real
‚Ñù¬π = CUDA.Diagonal(CUDA.rand(ComplexF32, size(G·µí, 2))) - ComplexF32(0.5 * (1 + 1im)) * CUDA.Diagonal(CUDA.ones(ComplexF32, size(G·µí, 2)))
‚Ñù¬≤ = CUDA.Diagonal(CUDA.rand(ComplexF32, size(G·µí, 2))) - ComplexF32(0.5 * (1 + 1im)) * CUDA.Diagonal(CUDA.ones(ComplexF32, size(G·µí, 2)))
S = CUDA.rand(ComplexF32, size(G·µí, 2))


(G::GlaOpr)(x::AbstractArray) = G * x
(G::AbstractMatrix)(x::AbstractArray) = G * x
adjoint(G::GlaOpr) = x -> conj(G * conj(x))
adjoint(G::Function) = x -> conj(G(conj(x)))
# G·µí·¥¥ = G·µí'

# ùïç‚Åª¬π = inv(ùïç)
# ùïç‚Åª·¥¥ = ùïç‚Åª¬π'
ùïå = x -> inv(ùïç)'(x) - G·µí'(x)
ùïå·¥¥ = x -> conj(ùïå(conj(x)))

ùïÜ = x -> ComplexF32(0.5) * (inv(ùïç)'(x) - inv(ùïç)(x))
ùîº = x -> ComplexF32(0.5) * (ùïå(x) - ùïå·¥¥(x))


Œ∂ = ComplexF32(1.0)
‚Ñ§·µÄ·µÄ = x -> ùïÜ(x) + ComplexF32(0.5) * (ùïå(‚Ñù¬π(x)) + conj(‚Ñù¬π)ùïå·¥¥(x)) + ComplexF32(0.5) * (ùïå(‚Ñù¬≤(x)) - conj(‚Ñù¬≤)ùïå·¥¥(x))
‚Ñ§·µÄÀ¢ = x -> ComplexF32(0.5) * (‚Ñù¬π(x) + im*‚Ñù¬≤(x))
‚Ñ§ = x -> ‚Ñ§·µÄ·µÄ(x) + Œ∂ * ùîº(x)



# SOLVING THE SYSTEM
similar_fill(v::AbstractArray, fill_val::T) where T = fill!(similar(v), fill_val)
similar_fill(v::AbstractArray, dims::NTuple{N, Int}, fill_val::T) where {N, T} = fill!(similar(v, dims), fill_val)
Base.:\(::Nothing, x::AbstractArray) = (x, 0)
function bicgstab(op, b::AbstractVector; preconditioner=nothing, max_iter::Int=size(op, 2), atol::Real=zero(real(eltype(b))), rtol::Real=sqrt(eps(real(eltype(b)))))
	T = eltype(b)
	atol = max(atol, rtol * norm(b))

    mvp = 0 # mvp = matrix vector products

	x = similar_fill(b, zero(T))
	œÅ_prev = zero(T)
	œâ = zero(T)
	Œ± = zero(T)
	v = similar_fill(b, zero(T))
	residual = deepcopy(b)
	residual_shadow = deepcopy(residual)
	p = deepcopy(residual)
	display(varinfo())
	s = similar(residual)

	for num_iter in 1:max_iter
		if norm(residual) < atol
			return x, mvp
		end

		œÅ = dot(residual_shadow, residual)
		if num_iter > 1
			Œ≤ = (œÅ / œÅ_prev) * (Œ± / œâ)
			p = residual + Œ≤*(p - œâ*v)
		end
		pÃÇ, precon_mvp = preconditioner \ p
        mvp += precon_mvp
		# v = op * pÃÇ
		v = op(pÃÇ)
        mvp += 1
		residual_v = dot(residual_shadow, v)
		Œ± = œÅ / residual_v
		residual -= Œ±*v
		s = deepcopy(residual)

		if norm(residual) < atol
			x += Œ±*pÃÇ
			return x, mvp
		end

		≈ù, precon_mvp = preconditioner \ s
        mvp += precon_mvp
		# t = op * ≈ù
        t = op(≈ù)
        mvp += 1
		œâ = dot(t, s) / dot(t, t)
		x += Œ±*pÃÇ + œâ*≈ù
		residual -= œâ*t
		œÅ_prev = œÅ
	end
    # @show norm(residual), atol
	throw("BiCGStab did not converge after $max_iter iterations.")
end

println(bicgstab(‚Ñ§, ‚Ñ§·µÄÀ¢(S), max_iter=size(G·µí, 2)))